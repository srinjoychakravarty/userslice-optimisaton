echo("What loop cadence would you like?")
loop_cadence = int(stdin())
echo("What CPU percentage is considered overusage?")
overusage_parameter = (stdin()).number()
echo("After how many consecutive strikes do you want to email the user?")
email_threshold = int(stdin())

f get_active_session_dicts()
{
    active_session_dict = {}
	users = []
	user_slices = `ls /sys/fs/cgroup/cpu/user.slice/` 
	usr_list = user_slices.lines()
	num_users = usr_list.len()
	base_path = "/sys/fs/cgroup/cpu/user.slice/"
	for i = 0; i < num_users; i = i + 1
	{
		usr_str = usr_list[i]
		if ("user" in usr_str) 
		{
			target = base_path+usr_str
			current_path = cd(target)
			temp_dict = {}
			wall_clock = `date +%s%N`
			temp_dict['wall_clock'] = int(wall_clock)	 
			cpu_clock_str = `cat $target/cpuacct.usage`
            temp_dict['cpu_clock'] = int(cpu_clock_str)  
			active_session_dict[usr_str] = temp_dict   
		}
	}
	return active_session_dict
}
# loop_cadence = int(arg(2))
# email_threshold = int(arg(3))
# overusage_parameter = (arg(4)).number()

echo("Loop Cadence: $loop_cadence")
echo("Email Threshold: $email_threshold")
echo("Overusage Parameter: $overusage_parameter")

loop = true
prev_round_dict = {}
dict_to_echo = {}
while loop == true
{
    active_session_dict = get_active_session_dicts()
    active_keys = active_session_dict.keys()                        
    num_active_keys = active_keys.len()
    echo("Number of Active Keys this round: $num_active_keys")
    if num_active_keys > 0                                               
    {
        old_keys = (prev_round_dict.keys()).diff(active_keys)
        num_old_keys = old_keys.len()
        echo("Keys expired this round: $num_old_keys")
        if (num_old_keys > 0)                                            
        {
            for old_key in old_keys                                     
            {
                active_session_dict.pop(old_key)
            }
        }
        remaining_keys = active_session_dict.keys()                          
        for key in remaining_keys                                           
        {
            echo("Entered Key: $key")
            if (prev_round_dict[key] == null)
            {
                begin_wall_clock = 0
                begin_cpu_clock = 0
                consecutive_overusage = 0
            }
            else
            {
                begin_wall_clock = prev_round_dict[key]['wall_clock']
                begin_cpu_clock = prev_round_dict[key]['cpu_clock']
                consecutive_overusage = prev_round_dict[key]['consecutive_overusage']
            }
            stop_wall_clock = active_session_dict[key]['wall_clock']
            stop_cpu_clock = active_session_dict[key]['cpu_clock']
            cpu_duration = stop_cpu_clock - begin_cpu_clock 
            wall_clock_duration = stop_wall_clock - begin_wall_clock
            cpu_usage_pct = ((cpu_duration / wall_clock_duration) * 100).round(3)
            echo("CPU Usage Percent: $cpu_usage_pct") 
            if (cpu_usage_pct > overusage_parameter)
            {
                echo("Entered Overusage Parameter with percent: $cpu_usage_pct")
                prev_round_dict[key] = {"wall_clock": stop_wall_clock, "cpu_clock": stop_cpu_clock, "cpu_usage": cpu_usage_pct, "consecutive_overusage": consecutive_overusage + 1}
            }
            else
            {
                prev_round_dict[key] = {"wall_clock": stop_wall_clock, "cpu_clock": stop_cpu_clock, "cpu_usage": cpu_usage_pct, "consecutive_overusage": 0}
            }
            dict_to_echo[key] = {"current_cpu_usage": cpu_usage_pct, "consecutive_overusage": consecutive_overusage}
        }
    }
    echo("Active Users on HPC this round...")
    echo(dict_to_echo)
    #echo(dict_to_echo.items())
    echo("Sleeping for $loop_cadence seconds...")
    sleep(loop_cadence*1000)
    echo("I ‚ù§ Northeastern")
}
